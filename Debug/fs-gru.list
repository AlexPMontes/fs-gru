
fs-gru.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d48  08002d48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d48  08002d48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d48  08002d48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08002d5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002d5c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9c7  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cec  00000000  00000000  0002aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000915  00000000  00000000  0002d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018403  00000000  00000000  0002dbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca8e  00000000  00000000  00045ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e911  00000000  00000000  00052a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a08  00000000  00000000  000e1398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e3da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d00 	.word	0x08002d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d00 	.word	0x08002d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbc0 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83e 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f996 	bl	800055c <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f976 	bl	8000520 <MX_DMA_Init>
  MX_TIM1_Init();
 8000234:	f000 f91c 	bl	8000470 <MX_TIM1_Init>
  MX_ADC_Init();
 8000238:	f000 f87c 	bl	8000334 <MX_ADC_Init>
  MX_CAN_Init();
 800023c:	f000 f8e2 	bl	8000404 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_values, 2);
 8000240:	4915      	ldr	r1, [pc, #84]	; (8000298 <main+0x78>)
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <main+0x7c>)
 8000244:	2202      	movs	r2, #2
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fd52 	bl	8000cf0 <HAL_ADC_Start_DMA>


  TxHeader_adc.DLC=6;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <main+0x80>)
 800024e:	2206      	movs	r2, #6
 8000250:	611a      	str	r2, [r3, #16]
  TxHeader_adc.ExtId=0;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <main+0x80>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  TxHeader_adc.IDE= CAN_ID_STD;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <main+0x80>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]
  TxHeader_adc.RTR=CAN_RTR_DATA;
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <main+0x80>)
 8000260:	2200      	movs	r2, #0
 8000262:	60da      	str	r2, [r3, #12]
  TxHeader_adc.StdId= ADC_ID;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0x80>)
 8000266:	22a0      	movs	r2, #160	; 0xa0
 8000268:	601a      	str	r2, [r3, #0]
  TxHeader_adc.TransmitGlobalTime= DISABLE;
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <main+0x80>)
 800026c:	2200      	movs	r2, #0
 800026e:	751a      	strb	r2, [r3, #20]

  TxHeader_timer.DLC=4;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	2204      	movs	r2, #4
 8000274:	611a      	str	r2, [r3, #16]
  TxHeader_timer.ExtId=0;
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <main+0x84>)
 8000278:	2200      	movs	r2, #0
 800027a:	605a      	str	r2, [r3, #4]
  TxHeader_timer.IDE= CAN_ID_STD;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x84>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  TxHeader_timer.RTR=CAN_RTR_DATA;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <main+0x84>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
  TxHeader_timer.StdId= TIMER_ID;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <main+0x84>)
 800028a:	22a1      	movs	r2, #161	; 0xa1
 800028c:	601a      	str	r2, [r3, #0]
  TxHeader_timer.TransmitGlobalTime= DISABLE;
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <main+0x84>)
 8000290:	2200      	movs	r2, #0
 8000292:	751a      	strb	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x74>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000011c 	.word	0x2000011c
 800029c:	20000028 	.word	0x20000028
 80002a0:	2000012c 	.word	0x2000012c
 80002a4:	20000144 	.word	0x20000144

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	; 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fcf5 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fcee 	bl	8002ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002cc:	0021      	movs	r1, r4
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2212      	movs	r2, #18
 80002d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2201      	movs	r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2201      	movs	r2, #1
 80002de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2210      	movs	r2, #16
 80002e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2210      	movs	r2, #16
 80002ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fe3f 	bl	8001f78 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80002fe:	f000 f9d9 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f002 f9b0 	bl	8002684 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000328:	f000 f9c4 	bl	80006b4 <Error_Handler>
  }
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b013      	add	sp, #76	; 0x4c
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	230c      	movs	r3, #12
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 fcb0 	bl	8002ca8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000348:	4b2c      	ldr	r3, [pc, #176]	; (80003fc <MX_ADC_Init+0xc8>)
 800034a:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <MX_ADC_Init+0xcc>)
 800034c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800034e:	4b2b      	ldr	r3, [pc, #172]	; (80003fc <MX_ADC_Init+0xc8>)
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000354:	4b29      	ldr	r3, [pc, #164]	; (80003fc <MX_ADC_Init+0xc8>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <MX_ADC_Init+0xc8>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000360:	4b26      	ldr	r3, [pc, #152]	; (80003fc <MX_ADC_Init+0xc8>)
 8000362:	2201      	movs	r2, #1
 8000364:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <MX_ADC_Init+0xc8>)
 8000368:	2204      	movs	r2, #4
 800036a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <MX_ADC_Init+0xc8>)
 800036e:	2200      	movs	r2, #0
 8000370:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000372:	4b22      	ldr	r3, [pc, #136]	; (80003fc <MX_ADC_Init+0xc8>)
 8000374:	2200      	movs	r2, #0
 8000376:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <MX_ADC_Init+0xc8>)
 800037a:	2201      	movs	r2, #1
 800037c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_ADC_Init+0xc8>)
 8000380:	2200      	movs	r2, #0
 8000382:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_ADC_Init+0xc8>)
 8000386:	22c2      	movs	r2, #194	; 0xc2
 8000388:	32ff      	adds	r2, #255	; 0xff
 800038a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_ADC_Init+0xc8>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_ADC_Init+0xc8>)
 8000394:	2224      	movs	r2, #36	; 0x24
 8000396:	2101      	movs	r1, #1
 8000398:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_ADC_Init+0xc8>)
 800039c:	2201      	movs	r2, #1
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_ADC_Init+0xc8>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fb64 	bl	8000a70 <HAL_ADC_Init>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003ac:	f000 f982 	bl	80006b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	0152      	lsls	r2, r2, #5
 80003bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	0552      	lsls	r2, r2, #21
 80003c4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003c6:	1d3a      	adds	r2, r7, #4
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_ADC_Init+0xc8>)
 80003ca:	0011      	movs	r1, r2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fdd5 	bl	8000f7c <HAL_ADC_ConfigChannel>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003d6:	f000 f96d 	bl	80006b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2201      	movs	r2, #1
 80003de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e0:	1d3a      	adds	r2, r7, #4
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_ADC_Init+0xc8>)
 80003e4:	0011      	movs	r1, r2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fdc8 	bl	8000f7c <HAL_ADC_ConfigChannel>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80003f0:	f000 f960 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000028 	.word	0x20000028
 8000400:	40012400 	.word	0x40012400

08000404 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_CAN_Init+0x64>)
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <MX_CAN_Init+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_CAN_Init+0x64>)
 8000410:	2210      	movs	r2, #16
 8000412:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_CAN_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <MX_CAN_Init+0x64>)
 8000434:	2200      	movs	r2, #0
 8000436:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_CAN_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_CAN_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_CAN_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_CAN_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <MX_CAN_Init+0x64>)
 8000452:	0018      	movs	r0, r3
 8000454:	f000 ffa8 	bl	80013a8 <HAL_CAN_Init>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800045c:	f000 f92a 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	200000ac 	.word	0x200000ac
 800046c:	40006400 	.word	0x40006400

08000470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	2408      	movs	r4, #8
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2310      	movs	r3, #16
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f002 fc11 	bl	8002ca8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	2308      	movs	r3, #8
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f002 fc0a 	bl	8002ca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <MX_TIM1_Init+0xa4>)
 8000496:	4a20      	ldr	r2, [pc, #128]	; (8000518 <MX_TIM1_Init+0xa8>)
 8000498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (SystemCoreClock / 1000) - 1; //Le damos una frecuencia de 1kHz (aumenta en 1 cada milisegundo)
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_TIM1_Init+0xac>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	22fa      	movs	r2, #250	; 0xfa
 80004a0:	0091      	lsls	r1, r2, #2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff fe30 	bl	8000108 <__udivsi3>
 80004a8:	0003      	movs	r3, r0
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1 - 1; //Hacemos que el period sea de 1, para que así cada vez que cuente 1, mande una interrupcion y el timer aumente en 1
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	0152      	lsls	r2, r2, #5
 80004d4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004d6:	193a      	adds	r2, r7, r4
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fa1d 	bl	800291c <HAL_TIM_ConfigClockSource>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80004e6:	f000 f8e5 	bl	80006b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f6:	003a      	movs	r2, r7
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_TIM1_Init+0xa4>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fb7b 	bl	8002bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000506:	f000 f8d5 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b007      	add	sp, #28
 8000510:	bd90      	pop	{r4, r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	200000d4 	.word	0x200000d4
 8000518:	40012c00 	.word	0x40012c00
 800051c:	20000000 	.word	0x20000000

08000520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_DMA_Init+0x38>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_DMA_Init+0x38>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	615a      	str	r2, [r3, #20]
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_DMA_Init+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2009      	movs	r0, #9
 8000544:	f001 f9ac 	bl	80018a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	2009      	movs	r0, #9
 800054a:	f001 f9be 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f002 fb9c 	bl	8002ca8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_GPIO_Init+0x6c>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x6c>)
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	0289      	lsls	r1, r1, #10
 800057a:	430a      	orrs	r2, r1
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_GPIO_Init+0x6c>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	029b      	lsls	r3, r3, #10
 8000586:	4013      	ands	r3, r2
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PIN_C_Pin */
  GPIO_InitStruct.Pin = PIN_C_Pin;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2204      	movs	r2, #4
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	22c4      	movs	r2, #196	; 0xc4
 8000596:	0392      	lsls	r2, r2, #14
 8000598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2201      	movs	r2, #1
 800059e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIN_C_GPIO_Port, &GPIO_InitStruct);
 80005a0:	1d3a      	adds	r2, r7, #4
 80005a2:	2390      	movs	r3, #144	; 0x90
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fb43 	bl	8001c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2006      	movs	r0, #6
 80005b4:	f001 f974 	bl	80018a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80005b8:	2006      	movs	r0, #6
 80005ba:	f001 f986 	bl	80018ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b006      	add	sp, #24
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	0002      	movs	r2, r0
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(PIN_C_GPIO_Port, PIN_C_Pin) == GPIO_PIN_RESET) {
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	2104      	movs	r1, #4
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fc90 	bl	8001f04 <HAL_GPIO_ReadPin>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d112      	bne.n	800060e <HAL_GPIO_EXTI_Callback+0x42>
		adc_1 = adc_values[0];
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <HAL_GPIO_EXTI_Callback+0xc0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005f0:	801a      	strh	r2, [r3, #0]
		adc_2 = adc_values[1];
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <HAL_GPIO_EXTI_Callback+0xc0>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <HAL_GPIO_EXTI_Callback+0xc8>)
 80005fa:	801a      	strh	r2, [r3, #0]
		diff = adc_1 - adc_2;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_GPIO_EXTI_Callback+0xc4>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	b29a      	uxth	r2, r3
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <HAL_GPIO_EXTI_Callback+0xcc>)
 800060a:	801a      	strh	r2, [r3, #0]

	    	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
	    	HAL_CAN_AddTxMessage(&hcan, &TxHeader_timer, TxData_timer, &TxMailBox);

	    }
}
 800060c:	e039      	b.n	8000682 <HAL_GPIO_EXTI_Callback+0xb6>
	    	adc_1 = adc_values[0];
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000616:	801a      	strh	r2, [r3, #0]
	    	adc_2 = adc_values[1];
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_GPIO_EXTI_Callback+0xc0>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000620:	801a      	strh	r2, [r3, #0]
	    	TxData_adc[0]=diff;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 800062a:	701a      	strb	r2, [r3, #0]
	    	TxData_adc[1]=diff >> 8;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <HAL_GPIO_EXTI_Callback+0xcc>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b29b      	uxth	r3, r3
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000638:	705a      	strb	r2, [r3, #1]
	    	TxData_adc[2]=adc_1;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_GPIO_EXTI_Callback+0xc4>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000642:	709a      	strb	r2, [r3, #2]
	    	TxData_adc[3]=adc_1 >> 8;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	b29b      	uxth	r3, r3
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000650:	70da      	strb	r2, [r3, #3]
	    	TxData_adc[4]=adc_2;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 800065a:	711a      	strb	r2, [r3, #4]
	  	    TxData_adc[5]=adc_2 >> 8;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_GPIO_EXTI_Callback+0xc8>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b29b      	uxth	r3, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000668:	715a      	strb	r2, [r3, #5]
	    	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <HAL_GPIO_EXTI_Callback+0xd0>)
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000672:	f000 ff97 	bl	80015a4 <HAL_CAN_AddTxMessage>
	    	HAL_CAN_AddTxMessage(&hcan, &TxHeader_timer, TxData_timer, &TxMailBox);
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_GPIO_EXTI_Callback+0xe0>)
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <HAL_GPIO_EXTI_Callback+0xdc>)
 800067e:	f000 ff91 	bl	80015a4 <HAL_CAN_AddTxMessage>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	2000011c 	.word	0x2000011c
 8000690:	20000124 	.word	0x20000124
 8000694:	20000126 	.word	0x20000126
 8000698:	20000128 	.word	0x20000128
 800069c:	20000160 	.word	0x20000160
 80006a0:	2000015c 	.word	0x2000015c
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	200000ac 	.word	0x200000ac
 80006ac:	20000168 	.word	0x20000168
 80006b0:	20000144 	.word	0x20000144

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x50>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_MspInit+0x50>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	619a      	str	r2, [r3, #24]
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x50>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x50>)
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_MspInit+0x50>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0549      	lsls	r1, r1, #21
 80006e8:	430a      	orrs	r2, r1
 80006ea:	61da      	str	r2, [r3, #28]
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x50>)
 80006ee:	69da      	ldr	r2, [r3, #28]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	055b      	lsls	r3, r3, #21
 80006f4:	4013      	ands	r3, r2
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x54>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_MspInit+0x54>)
 8000700:	2110      	movs	r1, #16
 8000702:	430a      	orrs	r2, r1
 8000704:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40021000 	.word	0x40021000
 8000714:	40010000 	.word	0x40010000

08000718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	2414      	movs	r4, #20
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	2314      	movs	r3, #20
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 fabc 	bl	8002ca8 <memset>
  if(hadc->Instance==ADC1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a31      	ldr	r2, [pc, #196]	; (80007fc <HAL_ADC_MspInit+0xe4>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d15b      	bne.n	80007f2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <HAL_ADC_MspInit+0xe8>)
 800073c:	699a      	ldr	r2, [r3, #24]
 800073e:	4b30      	ldr	r3, [pc, #192]	; (8000800 <HAL_ADC_MspInit+0xe8>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0089      	lsls	r1, r1, #2
 8000744:	430a      	orrs	r2, r1
 8000746:	619a      	str	r2, [r3, #24]
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <HAL_ADC_MspInit+0xe8>)
 800074a:	699a      	ldr	r2, [r3, #24]
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <HAL_ADC_MspInit+0xe8>)
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <HAL_ADC_MspInit+0xe8>)
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0289      	lsls	r1, r1, #10
 8000760:	430a      	orrs	r2, r1
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <HAL_ADC_MspInit+0xe8>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	029b      	lsls	r3, r3, #10
 800076c:	4013      	ands	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2203      	movs	r2, #3
 8000776:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2203      	movs	r2, #3
 800077c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	193a      	adds	r2, r7, r4
 8000786:	2390      	movs	r3, #144	; 0x90
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fa51 	bl	8001c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_ADC_MspInit+0xec>)
 8000794:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <HAL_ADC_MspInit+0xf0>)
 8000796:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_ADC_MspInit+0xec>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	00d2      	lsls	r2, r2, #3
 80007b8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007bc:	2220      	movs	r2, #32
 80007be:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f89b 	bl	8001904 <HAL_DMA_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80007d2:	f7ff ff6f 	bl	80006b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_ADC_MspInit+0xec>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	200c      	movs	r0, #12
 80007e8:	f001 f85a 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80007ec:	200c      	movs	r0, #12
 80007ee:	f001 f86c 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b00b      	add	sp, #44	; 0x2c
 80007f8:	bd90      	pop	{r4, r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40012400 	.word	0x40012400
 8000800:	40021000 	.word	0x40021000
 8000804:	20000068 	.word	0x20000068
 8000808:	40020008 	.word	0x40020008

0800080c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b08b      	sub	sp, #44	; 0x2c
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	2414      	movs	r4, #20
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	2314      	movs	r3, #20
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f002 fa42 	bl	8002ca8 <memset>
  if(hcan->Instance==CAN)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <HAL_CAN_MspInit+0x94>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d133      	bne.n	8000896 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_CAN_MspInit+0x98>)
 8000830:	69da      	ldr	r2, [r3, #28]
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_CAN_MspInit+0x98>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0489      	lsls	r1, r1, #18
 8000838:	430a      	orrs	r2, r1
 800083a:	61da      	str	r2, [r3, #28]
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_CAN_MspInit+0x98>)
 800083e:	69da      	ldr	r2, [r3, #28]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	049b      	lsls	r3, r3, #18
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_CAN_MspInit+0x98>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_CAN_MspInit+0x98>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0289      	lsls	r1, r1, #10
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_CAN_MspInit+0x98>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	029b      	lsls	r3, r3, #10
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	22c0      	movs	r2, #192	; 0xc0
 800086a:	0152      	lsls	r2, r2, #5
 800086c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2203      	movs	r2, #3
 8000880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2204      	movs	r2, #4
 8000886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	187a      	adds	r2, r7, r1
 800088a:	2390      	movs	r3, #144	; 0x90
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f001 f9cf 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00b      	add	sp, #44	; 0x2c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40006400 	.word	0x40006400
 80008a4:	40021000 	.word	0x40021000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8b4 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_C_Pin);
 80008da:	2004      	movs	r0, #4
 80008dc:	f001 fb30 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <DMA1_Channel1_IRQHandler+0x14>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 f8b6 	bl	8001a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000068 	.word	0x20000068

08000900 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <ADC1_IRQHandler+0x14>)
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fa74 	bl	8000df4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000028 	.word	0x20000028

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f7ff fff6 	bl	8000918 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <LoopForever+0x6>)
    LDR R1, [R0]
 800092e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000930:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <LoopForever+0xa>)
    CMP R1, R2
 8000934:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000936:	d105      	bne.n	8000944 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800093a:	4912      	ldr	r1, [pc, #72]	; (8000984 <LoopForever+0x12>)
    STR R1, [R0]
 800093c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000940:	4912      	ldr	r1, [pc, #72]	; (800098c <LoopForever+0x1a>)
    STR R1, [R0]
 8000942:	6001      	str	r1, [r0, #0]

08000944 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000946:	4913      	ldr	r1, [pc, #76]	; (8000994 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000948:	4a13      	ldr	r2, [pc, #76]	; (8000998 <LoopForever+0x26>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800095c:	4c10      	ldr	r4, [pc, #64]	; (80009a0 <LoopForever+0x2e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800096a:	f002 f9a5 	bl	8002cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096e:	f7ff fc57 	bl	8000220 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   r0, =_estack
 8000974:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000978:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800097c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000980:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000984:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000988:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800098c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	08002d50 	.word	0x08002d50
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	20000170 	.word	0x20000170

080009a4 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <CEC_CAN_IRQHandler>
	...

080009a8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <HAL_Init+0x24>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_Init+0x24>)
 80009b2:	2110      	movs	r1, #16
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f809 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009be:	f7ff fe7f 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_InitTick+0x5c>)
 80009da:	681c      	ldr	r4, [r3, #0]
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_InitTick+0x60>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	0019      	movs	r1, r3
 80009e2:	23fa      	movs	r3, #250	; 0xfa
 80009e4:	0098      	lsls	r0, r3, #2
 80009e6:	f7ff fb8f 	bl	8000108 <__udivsi3>
 80009ea:	0003      	movs	r3, r0
 80009ec:	0019      	movs	r1, r3
 80009ee:	0020      	movs	r0, r4
 80009f0:	f7ff fb8a 	bl	8000108 <__udivsi3>
 80009f4:	0003      	movs	r3, r0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 ff77 	bl	80018ea <HAL_SYSTICK_Config>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e00f      	b.n	8000a24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d80b      	bhi.n	8000a22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	425b      	negs	r3, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 ff44 	bl	80018a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_InitTick+0x64>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b003      	add	sp, #12
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	001a      	movs	r2, r3
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x20>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	18d2      	adds	r2, r2, r3
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_IncTick+0x20>)
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000008 	.word	0x20000008
 8000a58:	2000016c 	.word	0x2000016c

08000a5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <HAL_GetTick+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	2000016c 	.word	0x2000016c

08000a70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a78:	230f      	movs	r3, #15
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e125      	b.n	8000cda <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10a      	bne.n	8000aac <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2234      	movs	r2, #52	; 0x34
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fe36 	bl	8000718 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab0:	2210      	movs	r2, #16
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d000      	beq.n	8000ab8 <HAL_ADC_Init+0x48>
 8000ab6:	e103      	b.n	8000cc0 <HAL_ADC_Init+0x250>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d000      	beq.n	8000ac4 <HAL_ADC_Init+0x54>
 8000ac2:	e0fd      	b.n	8000cc0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2204      	movs	r2, #4
 8000acc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000ace:	d000      	beq.n	8000ad2 <HAL_ADC_Init+0x62>
 8000ad0:	e0f6      	b.n	8000cc0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad6:	4a83      	ldr	r2, [pc, #524]	; (8000ce4 <HAL_ADC_Init+0x274>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2202      	movs	r2, #2
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d112      	bne.n	8000b16 <HAL_ADC_Init+0xa6>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d009      	beq.n	8000b12 <HAL_ADC_Init+0xa2>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	401a      	ands	r2, r3
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d101      	bne.n	8000b16 <HAL_ADC_Init+0xa6>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <HAL_ADC_Init+0xa8>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d116      	bne.n	8000b4a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	2218      	movs	r2, #24
 8000b24:	4393      	bics	r3, r2
 8000b26:	0019      	movs	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	0899      	lsrs	r1, r3, #2
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4964      	ldr	r1, [pc, #400]	; (8000ce8 <HAL_ADC_Init+0x278>)
 8000b56:	400a      	ands	r2, r1
 8000b58:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7e1b      	ldrb	r3, [r3, #24]
 8000b5e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7e5b      	ldrb	r3, [r3, #25]
 8000b64:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b66:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7e9b      	ldrb	r3, [r3, #26]
 8000b6c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <HAL_ADC_Init+0x10e>
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	015b      	lsls	r3, r3, #5
 8000b7c:	e000      	b.n	8000b80 <HAL_ADC_Init+0x110>
 8000b7e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b80:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b86:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_Init+0x124>
 8000b90:	2304      	movs	r3, #4
 8000b92:	e000      	b.n	8000b96 <HAL_ADC_Init+0x126>
 8000b94:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b96:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2124      	movs	r1, #36	; 0x24
 8000b9c:	5c5b      	ldrb	r3, [r3, r1]
 8000b9e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ba0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7edb      	ldrb	r3, [r3, #27]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d115      	bne.n	8000bdc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7e9b      	ldrb	r3, [r3, #26]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d105      	bne.n	8000bc4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	0252      	lsls	r2, r2, #9
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	e00b      	b.n	8000bdc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc8:	2220      	movs	r2, #32
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	23c2      	movs	r3, #194	; 0xc2
 8000be2:	33ff      	adds	r3, #255	; 0xff
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d007      	beq.n	8000bf8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68d9      	ldr	r1, [r3, #12]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	055b      	lsls	r3, r3, #21
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d01b      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d017      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d013      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d00f      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d00b      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	d007      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	d003      	beq.n	8000c4c <HAL_ADC_Init+0x1dc>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	2b07      	cmp	r3, #7
 8000c4a:	d112      	bne.n	8000c72 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2107      	movs	r1, #7
 8000c58:	438a      	bics	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6959      	ldr	r1, [r3, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	2207      	movs	r2, #7
 8000c68:	401a      	ands	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <HAL_ADC_Init+0x27c>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d10b      	bne.n	8000c9a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4393      	bics	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c98:	e01c      	b.n	8000cd4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9e:	2212      	movs	r2, #18
 8000ca0:	4393      	bics	r3, r2
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cae:	2201      	movs	r2, #1
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cbe:	e009      	b.n	8000cd4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	fffffefd 	.word	0xfffffefd
 8000ce8:	fffe0219 	.word	0xfffe0219
 8000cec:	833fffe7 	.word	0x833fffe7

08000cf0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cfc:	2317      	movs	r3, #23
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d15e      	bne.n	8000dce <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2234      	movs	r2, #52	; 0x34
 8000d14:	5c9b      	ldrb	r3, [r3, r2]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d101      	bne.n	8000d1e <HAL_ADC_Start_DMA+0x2e>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e05e      	b.n	8000ddc <HAL_ADC_Start_DMA+0xec>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2234      	movs	r2, #52	; 0x34
 8000d22:	2101      	movs	r1, #1
 8000d24:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	7e5b      	ldrb	r3, [r3, #25]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d007      	beq.n	8000d3e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d2e:	2317      	movs	r3, #23
 8000d30:	18fc      	adds	r4, r7, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fa2f 	bl	8001198 <ADC_Enable>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d3e:	2317      	movs	r3, #23
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d146      	bne.n	8000dd6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4c:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <HAL_ADC_Start_DMA+0xf4>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	0052      	lsls	r2, r2, #1
 8000d54:	431a      	orrs	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2234      	movs	r2, #52	; 0x34
 8000d64:	2100      	movs	r1, #0
 8000d66:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_ADC_Start_DMA+0xf8>)
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_ADC_Start_DMA+0xfc>)
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_ADC_Start_DMA+0x100>)
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	221c      	movs	r2, #28
 8000d86:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2110      	movs	r1, #16
 8000d94:	430a      	orrs	r2, r1
 8000d96:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3340      	adds	r3, #64	; 0x40
 8000db2:	0019      	movs	r1, r3
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f000 fdec 	bl	8001994 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	e003      	b.n	8000dd6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dce:	2317      	movs	r3, #23
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000dd6:	2317      	movs	r3, #23
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b007      	add	sp, #28
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	fffff0fe 	.word	0xfffff0fe
 8000de8:	080012a1 	.word	0x080012a1
 8000dec:	08001355 	.word	0x08001355
 8000df0:	08001373 	.word	0x08001373

08000df4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_ADC_IRQHandler+0x28>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2204      	movs	r2, #4
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d107      	bne.n	8000e2c <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e22:	d049      	beq.n	8000eb8 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2208      	movs	r2, #8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d045      	beq.n	8000eb8 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e30:	2210      	movs	r2, #16
 8000e32:	4013      	ands	r3, r2
 8000e34:	d106      	bne.n	8000e44 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d12a      	bne.n	8000ea8 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d126      	bne.n	8000ea8 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d022      	beq.n	8000ea8 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d110      	bne.n	8000e90 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	210c      	movs	r1, #12
 8000e7a:	438a      	bics	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <HAL_ADC_IRQHandler+0x144>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	2201      	movs	r2, #1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e8e:	e00b      	b.n	8000ea8 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	2220      	movs	r2, #32
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f846 	bl	8000f3c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d012      	beq.n	8000ee6 <HAL_ADC_IRQHandler+0xf2>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d00e      	beq.n	8000ee6 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	0252      	lsls	r2, r2, #9
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 f83f 	bl	8000f5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2210      	movs	r2, #16
 8000eea:	4013      	ands	r3, r2
 8000eec:	d020      	beq.n	8000f30 <HAL_ADC_IRQHandler+0x13c>
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d01c      	beq.n	8000f30 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d006      	beq.n	8000f0c <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10d      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	2202      	movs	r2, #2
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f822 	bl	8000f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	601a      	str	r2, [r3, #0]
  }

}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b004      	add	sp, #16
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	fffffefe 	.word	0xfffffefe

08000f3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	055b      	lsls	r3, r3, #21
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d011      	beq.n	8000fc2 <HAL_ADC_ConfigChannel+0x46>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_ADC_ConfigChannel+0x46>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d009      	beq.n	8000fc2 <HAL_ADC_ConfigChannel+0x46>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d005      	beq.n	8000fc2 <HAL_ADC_ConfigChannel+0x46>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_ConfigChannel+0x46>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2234      	movs	r2, #52	; 0x34
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x54>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e0d0      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1f6>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2234      	movs	r2, #52	; 0x34
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d000      	beq.n	8000fe6 <HAL_ADC_ConfigChannel+0x6a>
 8000fe4:	e0b4      	b.n	8001150 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a64      	ldr	r2, [pc, #400]	; (800117c <HAL_ADC_ConfigChannel+0x200>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d100      	bne.n	8000ff2 <HAL_ADC_ConfigChannel+0x76>
 8000ff0:	e082      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	055b      	lsls	r3, r3, #21
 8001010:	429a      	cmp	r2, r3
 8001012:	d037      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	2b01      	cmp	r3, #1
 800101a:	d033      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b02      	cmp	r3, #2
 8001022:	d02f      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	2b03      	cmp	r3, #3
 800102a:	d02b      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b04      	cmp	r3, #4
 8001032:	d027      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b05      	cmp	r3, #5
 800103a:	d023      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b06      	cmp	r3, #6
 8001042:	d01f      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	2b07      	cmp	r3, #7
 800104a:	d01b      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2107      	movs	r1, #7
 8001058:	400b      	ands	r3, r1
 800105a:	429a      	cmp	r2, r3
 800105c:	d012      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2107      	movs	r1, #7
 800106a:	438a      	bics	r2, r1
 800106c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6959      	ldr	r1, [r3, #20]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2207      	movs	r2, #7
 800107a:	401a      	ands	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b10      	cmp	r3, #16
 800108a:	d007      	beq.n	800109c <HAL_ADC_ConfigChannel+0x120>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b11      	cmp	r3, #17
 8001092:	d003      	beq.n	800109c <HAL_ADC_ConfigChannel+0x120>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b12      	cmp	r3, #18
 800109a:	d163      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_ADC_ConfigChannel+0x204>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d009      	beq.n	80010bc <HAL_ADC_ConfigChannel+0x140>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d102      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x13a>
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	03db      	lsls	r3, r3, #15
 80010b4:	e004      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x144>
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	045b      	lsls	r3, r3, #17
 80010ba:	e001      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x144>
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <HAL_ADC_ConfigChannel+0x204>)
 80010c2:	430b      	orrs	r3, r1
 80010c4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d14a      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_ADC_ConfigChannel+0x208>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	492d      	ldr	r1, [pc, #180]	; (8001188 <HAL_ADC_ConfigChannel+0x20c>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff f817 	bl	8000108 <__udivsi3>
 80010da:	0003      	movs	r3, r0
 80010dc:	001a      	movs	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010e8:	e002      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x16e>
 80010f6:	e035      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2101      	movs	r1, #1
 8001104:	4099      	lsls	r1, r3
 8001106:	000b      	movs	r3, r1
 8001108:	43d9      	mvns	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	400a      	ands	r2, r1
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b10      	cmp	r3, #16
 8001118:	d007      	beq.n	800112a <HAL_ADC_ConfigChannel+0x1ae>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b11      	cmp	r3, #17
 8001120:	d003      	beq.n	800112a <HAL_ADC_ConfigChannel+0x1ae>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b12      	cmp	r3, #18
 8001128:	d11c      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_ADC_ConfigChannel+0x204>)
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d007      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x1ca>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d101      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x1c6>
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_ADC_ConfigChannel+0x210>)
 8001140:	e002      	b.n	8001148 <HAL_ADC_ConfigChannel+0x1cc>
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_ADC_ConfigChannel+0x214>)
 8001144:	e000      	b.n	8001148 <HAL_ADC_ConfigChannel+0x1cc>
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_ADC_ConfigChannel+0x218>)
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_ADC_ConfigChannel+0x204>)
 800114a:	400b      	ands	r3, r1
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e009      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001154:	2220      	movs	r2, #32
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2234      	movs	r2, #52	; 0x34
 8001168:	2100      	movs	r1, #0
 800116a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800116c:	230f      	movs	r3, #15
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	781b      	ldrb	r3, [r3, #0]
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	00001001 	.word	0x00001001
 8001180:	40012708 	.word	0x40012708
 8001184:	20000000 	.word	0x20000000
 8001188:	000f4240 	.word	0x000f4240
 800118c:	ffbfffff 	.word	0xffbfffff
 8001190:	feffffff 	.word	0xfeffffff
 8001194:	ff7fffff 	.word	0xff7fffff

08001198 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2203      	movs	r2, #3
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d112      	bne.n	80011dc <ADC_Enable+0x44>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	4013      	ands	r3, r2
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d009      	beq.n	80011d8 <ADC_Enable+0x40>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	401a      	ands	r2, r3
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d101      	bne.n	80011dc <ADC_Enable+0x44>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <ADC_Enable+0x46>
 80011dc:	2300      	movs	r3, #0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d152      	bne.n	8001288 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a2a      	ldr	r2, [pc, #168]	; (8001294 <ADC_Enable+0xfc>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	d00d      	beq.n	800120a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	2210      	movs	r2, #16
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fe:	2201      	movs	r2, #1
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e03f      	b.n	800128a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <ADC_Enable+0x100>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <ADC_Enable+0x104>)
 8001220:	0018      	movs	r0, r3
 8001222:	f7fe ff71 	bl	8000108 <__udivsi3>
 8001226:	0003      	movs	r3, r0
 8001228:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800122a:	e002      	b.n	8001232 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f9      	bne.n	800122c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001238:	f7ff fc10 	bl	8000a5c <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001240:	e01b      	b.n	800127a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001242:	f7ff fc0b 	bl	8000a5c <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d914      	bls.n	800127a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2201      	movs	r2, #1
 8001258:	4013      	ands	r3, r2
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00d      	beq.n	800127a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	2210      	movs	r2, #16
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126e:	2201      	movs	r2, #1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e007      	b.n	800128a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1dc      	bne.n	8001242 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	80000017 	.word	0x80000017
 8001298:	20000000 	.word	0x20000000
 800129c:	000f4240 	.word	0x000f4240

080012a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	2250      	movs	r2, #80	; 0x50
 80012b4:	4013      	ands	r3, r2
 80012b6:	d140      	bne.n	800133a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	431a      	orrs	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	23c0      	movs	r3, #192	; 0xc0
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4013      	ands	r3, r2
 80012d2:	d12d      	bne.n	8001330 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d129      	bne.n	8001330 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2208      	movs	r2, #8
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d122      	bne.n	8001330 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2204      	movs	r2, #4
 80012f2:	4013      	ands	r3, r2
 80012f4:	d110      	bne.n	8001318 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	210c      	movs	r1, #12
 8001302:	438a      	bics	r2, r1
 8001304:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <ADC_DMAConvCplt+0xb0>)
 800130c:	4013      	ands	r3, r2
 800130e:	2201      	movs	r2, #1
 8001310:	431a      	orrs	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
 8001316:	e00b      	b.n	8001330 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	2220      	movs	r2, #32
 800131e:	431a      	orrs	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001328:	2201      	movs	r2, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fe02 	bl	8000f3c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001338:	e005      	b.n	8001346 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	0010      	movs	r0, r2
 8001344:	4798      	blx	r3
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	fffffefe 	.word	0xfffffefe

08001354 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff fdf1 	bl	8000f4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}

08001372 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001384:	2240      	movs	r2, #64	; 0x40
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	2204      	movs	r2, #4
 8001392:	431a      	orrs	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff fde6 	bl	8000f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0f0      	b.n	800159c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2220      	movs	r2, #32
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff fa1f 	bl	800080c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013de:	f7ff fb3d 	bl	8000a5c <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013e6:	e013      	b.n	8001410 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e8:	f7ff fb38 	bl	8000a5c <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	d90c      	bls.n	8001410 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	0292      	lsls	r2, r2, #10
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2220      	movs	r2, #32
 8001408:	2105      	movs	r1, #5
 800140a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0c5      	b.n	800159c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	4013      	ands	r3, r2
 800141a:	d0e5      	beq.n	80013e8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2102      	movs	r1, #2
 8001428:	438a      	bics	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff fb16 	bl	8000a5c <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001434:	e013      	b.n	800145e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001436:	f7ff fb11 	bl	8000a5c <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b0a      	cmp	r3, #10
 8001442:	d90c      	bls.n	800145e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0292      	lsls	r2, r2, #10
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	2105      	movs	r1, #5
 8001458:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e09e      	b.n	800159c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1e5      	bne.n	8001436 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7e1b      	ldrb	r3, [r3, #24]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	438a      	bics	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e5b      	ldrb	r3, [r3, #25]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e007      	b.n	80014be <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2140      	movs	r1, #64	; 0x40
 80014ba:	438a      	bics	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e9b      	ldrb	r3, [r3, #26]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2120      	movs	r1, #32
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2120      	movs	r1, #32
 80014e4:	438a      	bics	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7edb      	ldrb	r3, [r3, #27]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d108      	bne.n	8001502 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2110      	movs	r1, #16
 80014fc:	438a      	bics	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e007      	b.n	8001512 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2110      	movs	r1, #16
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f1b      	ldrb	r3, [r3, #28]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2108      	movs	r1, #8
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e007      	b.n	800153c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2108      	movs	r1, #8
 8001538:	438a      	bics	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7f5b      	ldrb	r3, [r3, #29]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2104      	movs	r1, #4
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2104      	movs	r1, #4
 8001562:	438a      	bics	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	431a      	orrs	r2, r3
 800157c:	0011      	movs	r1, r2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	1e5a      	subs	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	2101      	movs	r1, #1
 8001598:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b2:	201f      	movs	r0, #31
 80015b4:	183b      	adds	r3, r7, r0
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	2120      	movs	r1, #32
 80015ba:	5c52      	ldrb	r2, [r2, r1]
 80015bc:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c6:	183b      	adds	r3, r7, r0
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d004      	beq.n	80015d8 <HAL_CAN_AddTxMessage+0x34>
 80015ce:	183b      	adds	r3, r7, r0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d000      	beq.n	80015d8 <HAL_CAN_AddTxMessage+0x34>
 80015d6:	e0ab      	b.n	8001730 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	04db      	lsls	r3, r3, #19
 80015de:	4013      	ands	r3, r2
 80015e0:	d10a      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	051b      	lsls	r3, r3, #20
 80015e8:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015ea:	d105      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	055b      	lsls	r3, r3, #21
 80015f2:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015f4:	d100      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0x54>
 80015f6:	e092      	b.n	800171e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	0e1b      	lsrs	r3, r3, #24
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
 8001600:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001602:	2201      	movs	r2, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10c      	bne.n	800162e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4311      	orrs	r1, r2
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	3218      	adds	r2, #24
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	50d1      	str	r1, [r2, r3]
 800162c:	e00f      	b.n	800164e <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001638:	431a      	orrs	r2, r3
 800163a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001644:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	3218      	adds	r2, #24
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	18cb      	adds	r3, r1, r3
 800165e:	3304      	adds	r3, #4
 8001660:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	7d1b      	ldrb	r3, [r3, #20]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d112      	bne.n	8001690 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3318      	adds	r3, #24
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	3304      	adds	r3, #4
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3318      	adds	r3, #24
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	18cb      	adds	r3, r1, r3
 800168c:	3304      	adds	r3, #4
 800168e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3307      	adds	r3, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	061a      	lsls	r2, r3, #24
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3306      	adds	r3, #6
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3305      	adds	r3, #5
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3304      	adds	r3, #4
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0019      	movs	r1, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	6979      	ldr	r1, [r7, #20]
 80016bc:	23c6      	movs	r3, #198	; 0xc6
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	0109      	lsls	r1, r1, #4
 80016c2:	1841      	adds	r1, r0, r1
 80016c4:	18cb      	adds	r3, r1, r3
 80016c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3303      	adds	r3, #3
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	061a      	lsls	r2, r3, #24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3302      	adds	r3, #2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3301      	adds	r3, #1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	0019      	movs	r1, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	6979      	ldr	r1, [r7, #20]
 80016f2:	23c4      	movs	r3, #196	; 0xc4
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	0109      	lsls	r1, r1, #4
 80016f8:	1841      	adds	r1, r0, r1
 80016fa:	18cb      	adds	r3, r1, r3
 80016fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	3218      	adds	r2, #24
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	58d2      	ldr	r2, [r2, r3]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2101      	movs	r1, #1
 8001710:	4311      	orrs	r1, r2
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	3218      	adds	r2, #24
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e010      	b.n	8001740 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	0392      	lsls	r2, r2, #14
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e007      	b.n	8001740 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	02d2      	lsls	r2, r2, #11
 8001738:	431a      	orrs	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
  }
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b008      	add	sp, #32
 8001746:	bd80      	pop	{r7, pc}

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	0002      	movs	r2, r0
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b7f      	cmp	r3, #127	; 0x7f
 800175a:	d809      	bhi.n	8001770 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	001a      	movs	r2, r3
 8001762:	231f      	movs	r3, #31
 8001764:	401a      	ands	r2, r3
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_EnableIRQ+0x30>)
 8001768:	2101      	movs	r1, #1
 800176a:	4091      	lsls	r1, r2
 800176c:	000a      	movs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
  }
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	0002      	movs	r2, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b7f      	cmp	r3, #127	; 0x7f
 8001790:	d828      	bhi.n	80017e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <__NVIC_SetPriority+0xd4>)
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b25b      	sxtb	r3, r3
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	33c0      	adds	r3, #192	; 0xc0
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	589b      	ldr	r3, [r3, r2]
 80017a2:	1dfa      	adds	r2, r7, #7
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	2203      	movs	r2, #3
 80017aa:	400a      	ands	r2, r1
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	21ff      	movs	r1, #255	; 0xff
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	2303      	movs	r3, #3
 80017ca:	4003      	ands	r3, r0
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d0:	481f      	ldr	r0, [pc, #124]	; (8001850 <__NVIC_SetPriority+0xd4>)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	430a      	orrs	r2, r1
 80017dc:	33c0      	adds	r3, #192	; 0xc0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017e2:	e031      	b.n	8001848 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <__NVIC_SetPriority+0xd8>)
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0019      	movs	r1, r3
 80017ec:	230f      	movs	r3, #15
 80017ee:	400b      	ands	r3, r1
 80017f0:	3b08      	subs	r3, #8
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3306      	adds	r3, #6
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	18d3      	adds	r3, r2, r3
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	1dfa      	adds	r2, r7, #7
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	0011      	movs	r1, r2
 8001804:	2203      	movs	r2, #3
 8001806:	400a      	ands	r2, r1
 8001808:	00d2      	lsls	r2, r2, #3
 800180a:	21ff      	movs	r1, #255	; 0xff
 800180c:	4091      	lsls	r1, r2
 800180e:	000a      	movs	r2, r1
 8001810:	43d2      	mvns	r2, r2
 8001812:	401a      	ands	r2, r3
 8001814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	401a      	ands	r2, r3
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	0018      	movs	r0, r3
 8001824:	2303      	movs	r3, #3
 8001826:	4003      	ands	r3, r0
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <__NVIC_SetPriority+0xd8>)
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	001c      	movs	r4, r3
 8001834:	230f      	movs	r3, #15
 8001836:	4023      	ands	r3, r4
 8001838:	3b08      	subs	r3, #8
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	430a      	orrs	r2, r1
 800183e:	3306      	adds	r3, #6
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	18c3      	adds	r3, r0, r3
 8001844:	3304      	adds	r3, #4
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b003      	add	sp, #12
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1e5a      	subs	r2, r3, #1
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	045b      	lsls	r3, r3, #17
 8001868:	429a      	cmp	r2, r3
 800186a:	d301      	bcc.n	8001870 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186c:	2301      	movs	r3, #1
 800186e:	e010      	b.n	8001892 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <SysTick_Config+0x44>)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	3a01      	subs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001878:	2301      	movs	r3, #1
 800187a:	425b      	negs	r3, r3
 800187c:	2103      	movs	r1, #3
 800187e:	0018      	movs	r0, r3
 8001880:	f7ff ff7c 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x44>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x44>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	210f      	movs	r1, #15
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	1c02      	adds	r2, r0, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b004      	add	sp, #16
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	0002      	movs	r2, r0
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff ff33 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff ffaf 	bl	8001858 <SysTick_Config>
 80018fa:	0003      	movs	r3, r0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e036      	b.n	8001988 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2221      	movs	r2, #33	; 0x21
 800191e:	2102      	movs	r1, #2
 8001920:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_DMA_Init+0x8c>)
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0018      	movs	r0, r3
 800196c:	f000 f946 	bl	8001bfc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2221      	movs	r2, #33	; 0x21
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	2100      	movs	r1, #0
 8001984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	ffffc00f 	.word	0xffffc00f

08001994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2317      	movs	r3, #23
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_DMA_Start_IT+0x24>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e04f      	b.n	8001a58 <HAL_DMA_Start_IT+0xc4>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	2101      	movs	r1, #1
 80019be:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2221      	movs	r2, #33	; 0x21
 80019c4:	5c9b      	ldrb	r3, [r3, r2]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d13a      	bne.n	8001a42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2221      	movs	r2, #33	; 0x21
 80019d0:	2102      	movs	r1, #2
 80019d2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	438a      	bics	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f8d7 	bl	8001ba4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	210e      	movs	r1, #14
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00f      	b.n	8001a30 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	210a      	movs	r1, #10
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a4a:	2317      	movs	r3, #23
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001a52:	2317      	movs	r3, #23
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	781b      	ldrb	r3, [r3, #0]
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b006      	add	sp, #24
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	d024      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x72>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d020      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2220      	movs	r2, #32
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4091      	lsls	r1, r2
 8001ab8:	000a      	movs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x66>
 8001ac4:	e06a      	b.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	0010      	movs	r0, r2
 8001ace:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ad0:	e064      	b.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xda>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2220      	movs	r2, #32
 8001af2:	4013      	ands	r3, r2
 8001af4:	d10b      	bne.n	8001b0e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	210a      	movs	r1, #10
 8001b02:	438a      	bics	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2221      	movs	r2, #33	; 0x21
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	2102      	movs	r1, #2
 8001b18:	4091      	lsls	r1, r2
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2220      	movs	r2, #32
 8001b22:	2100      	movs	r1, #0
 8001b24:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d036      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	0010      	movs	r0, r2
 8001b36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b38:	e030      	b.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	2208      	movs	r2, #8
 8001b40:	409a      	lsls	r2, r3
 8001b42:	0013      	movs	r3, r2
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	d028      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d024      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	210e      	movs	r1, #14
 8001b5e:	438a      	bics	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4091      	lsls	r1, r2
 8001b6e:	000a      	movs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2221      	movs	r2, #33	; 0x21
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	0010      	movs	r0, r2
 8001b98:	4798      	blx	r3
    }
  }
}
 8001b9a:	e7ff      	b.n	8001b9c <HAL_DMA_IRQHandler+0x13c>
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4091      	lsls	r1, r2
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d108      	bne.n	8001be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001be2:	e007      	b.n	8001bf4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <DMA_CalcBaseAndBitshift+0x30>)
 8001c0a:	4694      	mov	ip, r2
 8001c0c:	4463      	add	r3, ip
 8001c0e:	2114      	movs	r1, #20
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fa79 	bl	8000108 <__udivsi3>
 8001c16:	0003      	movs	r3, r0
 8001c18:	009a      	lsls	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <DMA_CalcBaseAndBitshift+0x34>)
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	bffdfff8 	.word	0xbffdfff8
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	e149      	b.n	8001ed8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <HAL_GPIO_Init+0x28>
 8001c5a:	e13a      	b.n	8001ed2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d005      	beq.n	8001c74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d130      	bne.n	8001cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	409a      	lsls	r2, r3
 8001c82:	0013      	movs	r3, r2
 8001c84:	43da      	mvns	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	409a      	lsls	r2, r3
 8001c96:	0013      	movs	r3, r2
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001caa:	2201      	movs	r2, #1
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2203      	movs	r2, #3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d017      	beq.n	8001d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2203      	movs	r2, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d123      	bne.n	8001d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	58d3      	ldr	r3, [r2, r3]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2107      	movs	r1, #7
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	6939      	ldr	r1, [r7, #16]
 8001d64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	409a      	lsls	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	43da      	mvns	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2203      	movs	r2, #3
 8001d84:	401a      	ands	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	23c0      	movs	r3, #192	; 0xc0
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	4013      	ands	r3, r2
 8001da4:	d100      	bne.n	8001da8 <HAL_GPIO_Init+0x174>
 8001da6:	e094      	b.n	8001ed2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da8:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	430a      	orrs	r2, r1
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_GPIO_Init+0x2c0>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	589b      	ldr	r3, [r3, r2]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	2390      	movs	r3, #144	; 0x90
 8001de8:	05db      	lsls	r3, r3, #23
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x1d6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_GPIO_Init+0x2c4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x1d2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a40      	ldr	r2, [pc, #256]	; (8001efc <HAL_GPIO_Init+0x2c8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x1ce>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x1d8>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x1d8>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x1d8>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	2103      	movs	r1, #3
 8001e10:	400a      	ands	r2, r1
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x2c0>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43da      	mvns	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	035b      	lsls	r3, r3, #13
 8001e42:	4013      	ands	r3, r2
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	039b      	lsls	r3, r3, #14
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	4013      	ands	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	40da      	lsrs	r2, r3
 8001ee0:	1e13      	subs	r3, r2, #0
 8001ee2:	d000      	beq.n	8001ee6 <HAL_GPIO_Init+0x2b2>
 8001ee4:	e6ae      	b.n	8001c44 <HAL_GPIO_Init+0x10>
  } 
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b006      	add	sp, #24
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000800 	.word	0x48000800
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	1cbb      	adds	r3, r7, #2
 8001f10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	1cba      	adds	r2, r7, #2
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1e:	230f      	movs	r3, #15
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e003      	b.n	8001f30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
  }
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	0002      	movs	r2, r0
 8001f48:	1dbb      	adds	r3, r7, #6
 8001f4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	1dba      	adds	r2, r7, #6
 8001f52:	8812      	ldrh	r2, [r2, #0]
 8001f54:	4013      	ands	r3, r2
 8001f56:	d008      	beq.n	8001f6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f5a:	1dba      	adds	r2, r7, #6
 8001f5c:	8812      	ldrh	r2, [r2, #0]
 8001f5e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f60:	1dbb      	adds	r3, r7, #6
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7fe fb31 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f000 fb76 	bl	8002678 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_RCC_OscConfig+0x20>
 8001f96:	e08e      	b.n	80020b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f98:	4bc5      	ldr	r3, [pc, #788]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	220c      	movs	r2, #12
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa4:	4bc2      	ldr	r3, [pc, #776]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	220c      	movs	r2, #12
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d117      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x68>
 8001fb0:	4bbf      	ldr	r3, [pc, #764]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	401a      	ands	r2, r3
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc2:	4bbb      	ldr	r3, [pc, #748]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	029b      	lsls	r3, r3, #10
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d100      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x58>
 8001fce:	e071      	b.n	80020b4 <HAL_RCC_OscConfig+0x13c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d000      	beq.n	8001fda <HAL_RCC_OscConfig+0x62>
 8001fd8:	e06c      	b.n	80020b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f000 fb4c 	bl	8002678 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x80>
 8001fe8:	4bb1      	ldr	r3, [pc, #708]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4bb0      	ldr	r3, [pc, #704]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e02f      	b.n	8002058 <HAL_RCC_OscConfig+0xe0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0xa2>
 8002000:	4bab      	ldr	r3, [pc, #684]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4baa      	ldr	r3, [pc, #680]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002006:	49ab      	ldr	r1, [pc, #684]	; (80022b4 <HAL_RCC_OscConfig+0x33c>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4ba8      	ldr	r3, [pc, #672]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4ba7      	ldr	r3, [pc, #668]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002012:	49a9      	ldr	r1, [pc, #676]	; (80022b8 <HAL_RCC_OscConfig+0x340>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e01e      	b.n	8002058 <HAL_RCC_OscConfig+0xe0>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d10e      	bne.n	8002040 <HAL_RCC_OscConfig+0xc8>
 8002022:	4ba3      	ldr	r3, [pc, #652]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4ba2      	ldr	r3, [pc, #648]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	02c9      	lsls	r1, r1, #11
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b9e      	ldr	r3, [pc, #632]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0249      	lsls	r1, r1, #9
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xe0>
 8002040:	4b9b      	ldr	r3, [pc, #620]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b9a      	ldr	r3, [pc, #616]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002046:	499b      	ldr	r1, [pc, #620]	; (80022b4 <HAL_RCC_OscConfig+0x33c>)
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	4b98      	ldr	r3, [pc, #608]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b97      	ldr	r3, [pc, #604]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002052:	4999      	ldr	r1, [pc, #612]	; (80022b8 <HAL_RCC_OscConfig+0x340>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fcfc 	bl	8000a5c <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206a:	f7fe fcf7 	bl	8000a5c <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e2fd      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207c:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0xf2>
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fce7 	bl	8000a5c <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fce2 	bl	8000a5c <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e2e8      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b82      	ldr	r3, [pc, #520]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	029b      	lsls	r3, r3, #10
 80020ae:	4013      	ands	r3, r2
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x11c>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	d100      	bne.n	80020c2 <HAL_RCC_OscConfig+0x14a>
 80020c0:	e06c      	b.n	800219c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	220c      	movs	r2, #12
 80020c8:	4013      	ands	r3, r2
 80020ca:	d00e      	beq.n	80020ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020cc:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	220c      	movs	r2, #12
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d11f      	bne.n	8002118 <HAL_RCC_OscConfig+0x1a0>
 80020d8:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	025b      	lsls	r3, r3, #9
 80020e0:	401a      	ands	r2, r3
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b71      	ldr	r3, [pc, #452]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2202      	movs	r2, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x188>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e2bb      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	22f8      	movs	r2, #248	; 0xf8
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00da      	lsls	r2, r3, #3
 8002110:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e041      	b.n	800219c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d024      	beq.n	800216a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002126:	2101      	movs	r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fc96 	bl	8000a5c <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe fc91 	bl	8000a5c <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e297      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d0f1      	beq.n	8002136 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	22f8      	movs	r2, #248	; 0xf8
 8002158:	4393      	bics	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00da      	lsls	r2, r3, #3
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e018      	b.n	800219c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002170:	2101      	movs	r1, #1
 8002172:	438a      	bics	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe fc71 	bl	8000a5c <HAL_GetTick>
 800217a:	0003      	movs	r3, r0
 800217c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002180:	f7fe fc6c 	bl	8000a5c <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e272      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	d1f1      	bne.n	8002180 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4013      	ands	r3, r2
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80021b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7fe fc4f 	bl	8000a5c <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c4:	f7fe fc4a 	bl	8000a5c <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e250      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	d0f1      	beq.n	80021c4 <HAL_RCC_OscConfig+0x24c>
 80021e0:	e018      	b.n	8002214 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80021e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	438a      	bics	r2, r1
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fc35 	bl	8000a5c <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f8:	f7fe fc30 	bl	8000a5c <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e236      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d1f1      	bne.n	80021f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2204      	movs	r2, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d100      	bne.n	8002220 <HAL_RCC_OscConfig+0x2a8>
 800221e:	e0b5      	b.n	800238c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002220:	201f      	movs	r0, #31
 8002222:	183b      	adds	r3, r7, r0
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	055b      	lsls	r3, r3, #21
 8002230:	4013      	ands	r3, r2
 8002232:	d110      	bne.n	8002256 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	0549      	lsls	r1, r1, #21
 800223e:	430a      	orrs	r2, r1
 8002240:	61da      	str	r2, [r3, #28]
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	055b      	lsls	r3, r3, #21
 800224a:	4013      	ands	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002250:	183b      	adds	r3, r7, r0
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_OscConfig+0x344>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4013      	ands	r3, r2
 8002260:	d11a      	bne.n	8002298 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_RCC_OscConfig+0x344>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x344>)
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0049      	lsls	r1, r1, #1
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002270:	f7fe fbf4 	bl	8000a5c <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe fbef 	bl	8000a5c <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	; 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e1f5      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x344>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4013      	ands	r3, r2
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10f      	bne.n	80022c0 <HAL_RCC_OscConfig+0x348>
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <HAL_RCC_OscConfig+0x338>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	621a      	str	r2, [r3, #32]
 80022ac:	e036      	b.n	800231c <HAL_RCC_OscConfig+0x3a4>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	40021000 	.word	0x40021000
 80022b4:	fffeffff 	.word	0xfffeffff
 80022b8:	fffbffff 	.word	0xfffbffff
 80022bc:	40007000 	.word	0x40007000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x36a>
 80022c8:	4bca      	ldr	r3, [pc, #808]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	6a1a      	ldr	r2, [r3, #32]
 80022cc:	4bc9      	ldr	r3, [pc, #804]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	438a      	bics	r2, r1
 80022d2:	621a      	str	r2, [r3, #32]
 80022d4:	4bc7      	ldr	r3, [pc, #796]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	4bc6      	ldr	r3, [pc, #792]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022da:	2104      	movs	r1, #4
 80022dc:	438a      	bics	r2, r1
 80022de:	621a      	str	r2, [r3, #32]
 80022e0:	e01c      	b.n	800231c <HAL_RCC_OscConfig+0x3a4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x38c>
 80022ea:	4bc2      	ldr	r3, [pc, #776]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022ec:	6a1a      	ldr	r2, [r3, #32]
 80022ee:	4bc1      	ldr	r3, [pc, #772]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	2104      	movs	r1, #4
 80022f2:	430a      	orrs	r2, r1
 80022f4:	621a      	str	r2, [r3, #32]
 80022f6:	4bbf      	ldr	r3, [pc, #764]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	4bbe      	ldr	r3, [pc, #760]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	621a      	str	r2, [r3, #32]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0x3a4>
 8002304:	4bbb      	ldr	r3, [pc, #748]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	4bba      	ldr	r3, [pc, #744]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	621a      	str	r2, [r3, #32]
 8002310:	4bb8      	ldr	r3, [pc, #736]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	4bb7      	ldr	r3, [pc, #732]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002316:	2104      	movs	r1, #4
 8002318:	438a      	bics	r2, r1
 800231a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d014      	beq.n	800234e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe fb9a 	bl	8000a5c <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e009      	b.n	8002342 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fb95 	bl	8000a5c <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4aaf      	ldr	r2, [pc, #700]	; (80025f8 <HAL_RCC_OscConfig+0x680>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e19a      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	4bac      	ldr	r3, [pc, #688]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	2202      	movs	r2, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x3b6>
 800234c:	e013      	b.n	8002376 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fb85 	bl	8000a5c <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002356:	e009      	b.n	800236c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7fe fb80 	bl	8000a5c <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	4aa5      	ldr	r2, [pc, #660]	; (80025f8 <HAL_RCC_OscConfig+0x680>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e185      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4ba1      	ldr	r3, [pc, #644]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	2202      	movs	r2, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002376:	231f      	movs	r3, #31
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b9c      	ldr	r3, [pc, #624]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	4b9b      	ldr	r3, [pc, #620]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002386:	499d      	ldr	r1, [pc, #628]	; (80025fc <HAL_RCC_OscConfig+0x684>)
 8002388:	400a      	ands	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	4013      	ands	r3, r2
 8002394:	d063      	beq.n	800245e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d12a      	bne.n	80023f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800239e:	4b95      	ldr	r3, [pc, #596]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a2:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023a4:	2104      	movs	r1, #4
 80023a6:	430a      	orrs	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023aa:	4b92      	ldr	r3, [pc, #584]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ae:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fb51 	bl	8000a5c <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023c0:	f7fe fb4c 	bl	8000a5c <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e152      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023d2:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f1      	beq.n	80023c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023dc:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	22f8      	movs	r2, #248	; 0xf8
 80023e2:	4393      	bics	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	00da      	lsls	r2, r3, #3
 80023ec:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34
 80023f2:	e034      	b.n	800245e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	3305      	adds	r3, #5
 80023fa:	d111      	bne.n	8002420 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80023fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002400:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002402:	2104      	movs	r1, #4
 8002404:	438a      	bics	r2, r1
 8002406:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002408:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	22f8      	movs	r2, #248	; 0xf8
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	00da      	lsls	r2, r3, #3
 8002418:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800241a:	430a      	orrs	r2, r1
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
 800241e:	e01e      	b.n	800245e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002420:	4b74      	ldr	r3, [pc, #464]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002424:	4b73      	ldr	r3, [pc, #460]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002426:	2104      	movs	r1, #4
 8002428:	430a      	orrs	r2, r1
 800242a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800242c:	4b71      	ldr	r3, [pc, #452]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800242e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002430:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe fb10 	bl	8000a5c <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002442:	f7fe fb0b 	bl	8000a5c <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e111      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002454:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d1f1      	bne.n	8002442 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2220      	movs	r2, #32
 8002464:	4013      	ands	r3, r2
 8002466:	d05c      	beq.n	8002522 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002468:	4b62      	ldr	r3, [pc, #392]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	220c      	movs	r2, #12
 800246e:	4013      	ands	r3, r2
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d00e      	beq.n	8002492 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002474:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	220c      	movs	r2, #12
 800247a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800247c:	2b08      	cmp	r3, #8
 800247e:	d114      	bne.n	80024aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002480:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	23c0      	movs	r3, #192	; 0xc0
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	401a      	ands	r2, r3
 800248a:	23c0      	movs	r3, #192	; 0xc0
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	429a      	cmp	r2, r3
 8002490:	d10b      	bne.n	80024aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002492:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	4013      	ands	r3, r2
 800249c:	d040      	beq.n	8002520 <HAL_RCC_OscConfig+0x5a8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d03c      	beq.n	8002520 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0e6      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01b      	beq.n	80024ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80024b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b6:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0249      	lsls	r1, r1, #9
 80024bc:	430a      	orrs	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe facc 	bl	8000a5c <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ca:	f7fe fac7 	bl	8000a5c <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0cd      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024dc:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80024de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	4013      	ands	r3, r2
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x552>
 80024e8:	e01b      	b.n	8002522 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024ea:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	4943      	ldr	r1, [pc, #268]	; (8002600 <HAL_RCC_OscConfig+0x688>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fab1 	bl	8000a5c <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002500:	f7fe faac 	bl	8000a5c <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0b2      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x588>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002520:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d100      	bne.n	800252c <HAL_RCC_OscConfig+0x5b4>
 800252a:	e0a4      	b.n	8002676 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252c:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	220c      	movs	r2, #12
 8002532:	4013      	ands	r3, r2
 8002534:	2b08      	cmp	r3, #8
 8002536:	d100      	bne.n	800253a <HAL_RCC_OscConfig+0x5c2>
 8002538:	e078      	b.n	800262c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b02      	cmp	r3, #2
 8002540:	d14c      	bne.n	80025dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002548:	492e      	ldr	r1, [pc, #184]	; (8002604 <HAL_RCC_OscConfig+0x68c>)
 800254a:	400a      	ands	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fa85 	bl	8000a5c <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fa80 	bl	8000a5c <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e086      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	049b      	lsls	r3, r3, #18
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	220f      	movs	r2, #15
 800257c:	4393      	bics	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 8002586:	430a      	orrs	r2, r1
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x690>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	431a      	orrs	r2, r3
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	0449      	lsls	r1, r1, #17
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fa53 	bl	8000a5c <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fa4e 	bl	8000a5c <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e054      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	049b      	lsls	r3, r3, #18
 80025d6:	4013      	ands	r3, r2
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x644>
 80025da:	e04c      	b.n	8002676 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <HAL_RCC_OscConfig+0x68c>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fa38 	bl	8000a5c <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x6a6>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40021000 	.word	0x40021000
 80025f8:	00001388 	.word	0x00001388
 80025fc:	efffffff 	.word	0xefffffff
 8002600:	fffeffff 	.word	0xfffeffff
 8002604:	feffffff 	.word	0xfeffffff
 8002608:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fa26 	bl	8000a5c <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e02c      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_OscConfig+0x708>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	049b      	lsls	r3, r3, #18
 8002626:	4013      	ands	r3, r2
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x694>
 800262a:	e024      	b.n	8002676 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e01f      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x708>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x708>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	23c0      	movs	r3, #192	; 0xc0
 8002648:	025b      	lsls	r3, r3, #9
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	429a      	cmp	r2, r3
 8002652:	d10e      	bne.n	8002672 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	220f      	movs	r2, #15
 8002658:	401a      	ands	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	23f0      	movs	r3, #240	; 0xf0
 8002666:	039b      	lsls	r3, r3, #14
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b008      	add	sp, #32
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0bf      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d911      	bls.n	80026ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b5e      	ldr	r3, [pc, #376]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	4393      	bics	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0a6      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d015      	beq.n	8002700 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2204      	movs	r2, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d006      	beq.n	80026ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026de:	4b51      	ldr	r3, [pc, #324]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80026e4:	21e0      	movs	r1, #224	; 0xe0
 80026e6:	00c9      	lsls	r1, r1, #3
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	22f0      	movs	r2, #240	; 0xf0
 80026f2:	4393      	bics	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	d04c      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	4013      	ands	r3, r2
 800271c:	d120      	bne.n	8002760 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07a      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	049b      	lsls	r3, r3, #18
 8002732:	4013      	ands	r3, r2
 8002734:	d114      	bne.n	8002760 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06e      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 8002744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	4013      	ands	r3, r2
 800274c:	d108      	bne.n	8002760 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e062      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e05b      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2203      	movs	r2, #3
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe f972 	bl	8000a5c <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277c:	e009      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277e:	f7fe f96d 	bl	8000a5c <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_RCC_ClockConfig+0x1a4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e042      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	220c      	movs	r2, #12
 8002798:	401a      	ands	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1ec      	bne.n	800277e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d211      	bcs.n	80027d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4393      	bics	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x19c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e020      	b.n	8002818 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_RCC_ClockConfig+0x1a8>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027f4:	f000 f820 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f8:	0001      	movs	r1, r0
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1a0>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	220f      	movs	r2, #15
 8002802:	4013      	ands	r3, r2
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1ac>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	000a      	movs	r2, r1
 800280a:	40da      	lsrs	r2, r3
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1b0>)
 800280e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002810:	2003      	movs	r0, #3
 8002812:	f7fe f8dd 	bl	80009d0 <HAL_InitTick>
  
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40022000 	.word	0x40022000
 8002824:	40021000 	.word	0x40021000
 8002828:	00001388 	.word	0x00001388
 800282c:	fffff8ff 	.word	0xfffff8ff
 8002830:	08002d18 	.word	0x08002d18
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	220c      	movs	r2, #12
 800285c:	4013      	ands	r3, r2
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d046      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002862:	d848      	bhi.n	80028f6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002864:	2b04      	cmp	r3, #4
 8002866:	d002      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x36>
 8002868:	2b08      	cmp	r3, #8
 800286a:	d003      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x3c>
 800286c:	e043      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002870:	613b      	str	r3, [r7, #16]
      break;
 8002872:	e043      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	220f      	movs	r2, #15
 800287a:	4013      	ands	r3, r2
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <HAL_RCC_GetSysClockFreq+0xd8>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	220f      	movs	r2, #15
 8002888:	4013      	ands	r3, r2
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_RCC_GetSysClockFreq+0xdc>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	025b      	lsls	r3, r3, #9
 8002896:	401a      	ands	r2, r3
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	025b      	lsls	r3, r3, #9
 800289c:	429a      	cmp	r2, r3
 800289e:	d109      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	481a      	ldr	r0, [pc, #104]	; (800290c <HAL_RCC_GetSysClockFreq+0xd4>)
 80028a4:	f7fd fc30 	bl	8000108 <__udivsi3>
 80028a8:	0003      	movs	r3, r0
 80028aa:	001a      	movs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4353      	muls	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e01a      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	401a      	ands	r2, r3
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	4814      	ldr	r0, [pc, #80]	; (8002918 <HAL_RCC_GetSysClockFreq+0xe0>)
 80028c8:	f7fd fc1e 	bl	8000108 <__udivsi3>
 80028cc:	0003      	movs	r3, r0
 80028ce:	001a      	movs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4353      	muls	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e008      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <HAL_RCC_GetSysClockFreq+0xd4>)
 80028dc:	f7fd fc14 	bl	8000108 <__udivsi3>
 80028e0:	0003      	movs	r3, r0
 80028e2:	001a      	movs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4353      	muls	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	613b      	str	r3, [r7, #16]
      break;
 80028ee:	e005      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_GetSysClockFreq+0xe0>)
 80028f2:	613b      	str	r3, [r7, #16]
      break;
 80028f4:	e002      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetSysClockFreq+0xd4>)
 80028f8:	613b      	str	r3, [r7, #16]
      break;
 80028fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028fc:	693b      	ldr	r3, [r7, #16]
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b006      	add	sp, #24
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	08002d28 	.word	0x08002d28
 8002914:	08002d38 	.word	0x08002d38
 8002918:	02dc6c00 	.word	0x02dc6c00

0800291c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	223c      	movs	r2, #60	; 0x3c
 8002932:	5c9b      	ldrb	r3, [r3, r2]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIM_ConfigClockSource+0x20>
 8002938:	2302      	movs	r3, #2
 800293a:	e0bc      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x19a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	223c      	movs	r2, #60	; 0x3c
 8002940:	2101      	movs	r1, #1
 8002942:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	223d      	movs	r2, #61	; 0x3d
 8002948:	2102      	movs	r1, #2
 800294a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2277      	movs	r2, #119	; 0x77
 8002958:	4393      	bics	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	0192      	lsls	r2, r2, #6
 8002974:	4293      	cmp	r3, r2
 8002976:	d040      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xde>
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0192      	lsls	r2, r2, #6
 800297c:	4293      	cmp	r3, r2
 800297e:	d900      	bls.n	8002982 <HAL_TIM_ConfigClockSource+0x66>
 8002980:	e088      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	0152      	lsls	r2, r2, #5
 8002986:	4293      	cmp	r3, r2
 8002988:	d100      	bne.n	800298c <HAL_TIM_ConfigClockSource+0x70>
 800298a:	e088      	b.n	8002a9e <HAL_TIM_ConfigClockSource+0x182>
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0152      	lsls	r2, r2, #5
 8002990:	4293      	cmp	r3, r2
 8002992:	d900      	bls.n	8002996 <HAL_TIM_ConfigClockSource+0x7a>
 8002994:	e07e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 8002996:	2b70      	cmp	r3, #112	; 0x70
 8002998:	d018      	beq.n	80029cc <HAL_TIM_ConfigClockSource+0xb0>
 800299a:	d900      	bls.n	800299e <HAL_TIM_ConfigClockSource+0x82>
 800299c:	e07a      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 800299e:	2b60      	cmp	r3, #96	; 0x60
 80029a0:	d04f      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x126>
 80029a2:	d900      	bls.n	80029a6 <HAL_TIM_ConfigClockSource+0x8a>
 80029a4:	e076      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029a6:	2b50      	cmp	r3, #80	; 0x50
 80029a8:	d03b      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x106>
 80029aa:	d900      	bls.n	80029ae <HAL_TIM_ConfigClockSource+0x92>
 80029ac:	e072      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d057      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x146>
 80029b2:	d900      	bls.n	80029b6 <HAL_TIM_ConfigClockSource+0x9a>
 80029b4:	e06e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029b6:	2b30      	cmp	r3, #48	; 0x30
 80029b8:	d063      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029ba:	d86b      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d060      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029c0:	d868      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d05d      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d05b      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x166>
 80029ca:	e063      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	f000 f8ec 	bl	8002bb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2277      	movs	r2, #119	; 0x77
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
      break;
 80029f8:	e052      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a0a:	f000 f8d5 	bl	8002bb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	01c9      	lsls	r1, r1, #7
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
      break;
 8002a20:	e03e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	001a      	movs	r2, r3
 8002a30:	f000 f848 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2150      	movs	r1, #80	; 0x50
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f8a2 	bl	8002b84 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e02e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4e:	001a      	movs	r2, r3
 8002a50:	f000 f866 	bl	8002b20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2160      	movs	r1, #96	; 0x60
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f892 	bl	8002b84 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e01e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	001a      	movs	r2, r3
 8002a70:	f000 f828 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f882 	bl	8002b84 <TIM_ITRx_SetConfig>
      break;
 8002a80:	e00e      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	f000 f879 	bl	8002b84 <TIM_ITRx_SetConfig>
      break;
 8002a92:	e005      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
      break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	223d      	movs	r2, #61	; 0x3d
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223c      	movs	r2, #60	; 0x3c
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

  return status;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	ffff00ff 	.word	0xffff00ff

08002ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4393      	bics	r3, r2
 8002ade:	001a      	movs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	22f0      	movs	r2, #240	; 0xf0
 8002aee:	4393      	bics	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	220a      	movs	r2, #10
 8002b00:	4393      	bics	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b006      	add	sp, #24
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	2210      	movs	r2, #16
 8002b32:	4393      	bics	r3, r2
 8002b34:	001a      	movs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <TIM_TI2_ConfigInputStage+0x60>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	031b      	lsls	r3, r3, #12
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	22a0      	movs	r2, #160	; 0xa0
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b006      	add	sp, #24
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	ffff0fff 	.word	0xffff0fff

08002b84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2270      	movs	r2, #112	; 0x70
 8002b98:	4393      	bics	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	609a      	str	r2, [r3, #8]
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <TIM_ETR_SetConfig+0x3c>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	021a      	lsls	r2, r3, #8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b006      	add	sp, #24
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	ffff00ff 	.word	0xffff00ff

08002bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223c      	movs	r2, #60	; 0x3c
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e042      	b.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223c      	movs	r2, #60	; 0x3c
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223d      	movs	r2, #61	; 0x3d
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2270      	movs	r2, #112	; 0x70
 8002c34:	4393      	bics	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00a      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	05db      	lsls	r3, r3, #23
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10c      	bne.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	4393      	bics	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	223d      	movs	r2, #61	; 0x3d
 8002c88:	2101      	movs	r1, #1
 8002c8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	223c      	movs	r2, #60	; 0x3c
 8002c90:	2100      	movs	r1, #0
 8002c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <memset>:
 8002ca8:	0003      	movs	r3, r0
 8002caa:	1882      	adds	r2, r0, r2
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	7019      	strb	r1, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <__libc_init_array>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	2600      	movs	r6, #0
 8002cbc:	4c0c      	ldr	r4, [pc, #48]	; (8002cf0 <__libc_init_array+0x38>)
 8002cbe:	4d0d      	ldr	r5, [pc, #52]	; (8002cf4 <__libc_init_array+0x3c>)
 8002cc0:	1b64      	subs	r4, r4, r5
 8002cc2:	10a4      	asrs	r4, r4, #2
 8002cc4:	42a6      	cmp	r6, r4
 8002cc6:	d109      	bne.n	8002cdc <__libc_init_array+0x24>
 8002cc8:	2600      	movs	r6, #0
 8002cca:	f000 f819 	bl	8002d00 <_init>
 8002cce:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <__libc_init_array+0x40>)
 8002cd0:	4d0a      	ldr	r5, [pc, #40]	; (8002cfc <__libc_init_array+0x44>)
 8002cd2:	1b64      	subs	r4, r4, r5
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	42a6      	cmp	r6, r4
 8002cd8:	d105      	bne.n	8002ce6 <__libc_init_array+0x2e>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	00b3      	lsls	r3, r6, #2
 8002cde:	58eb      	ldr	r3, [r5, r3]
 8002ce0:	4798      	blx	r3
 8002ce2:	3601      	adds	r6, #1
 8002ce4:	e7ee      	b.n	8002cc4 <__libc_init_array+0xc>
 8002ce6:	00b3      	lsls	r3, r6, #2
 8002ce8:	58eb      	ldr	r3, [r5, r3]
 8002cea:	4798      	blx	r3
 8002cec:	3601      	adds	r6, #1
 8002cee:	e7f2      	b.n	8002cd6 <__libc_init_array+0x1e>
 8002cf0:	08002d48 	.word	0x08002d48
 8002cf4:	08002d48 	.word	0x08002d48
 8002cf8:	08002d4c 	.word	0x08002d4c
 8002cfc:	08002d48 	.word	0x08002d48

08002d00 <_init>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr

08002d0c <_fini>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr
